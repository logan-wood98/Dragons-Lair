import javafx.beans.property.BooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;

import java.time.LocalDate;

/**
 * A Title that has the ability to be requested by a Customer. A Title
 * consists of a title, price, notes, a flagged property, and unique ID
 * that is generated by the database.
 */
public class Title {

    private String title;
    private int price;
    private String notes;
    private int id;
    private BooleanProperty flagged;
    private LocalDate dateFlagged;
    private int issueFlagged;

    /**
     * Constructor. Creates a Title with the specified properties
     * @param id The ID of the Title
     * @param title The title of the Title
     * @param price The price of the Title
     * @param notes The notes of the Title
     */
    public Title(int id, String title, int price, String notes) {
        this.id = id;
        this.title = title;
        this.price = price;
        this.notes = notes;
        this.flagged = new SimpleBooleanProperty(false);
    }

    /**
     * Constructor. Creates a Title with the specified properties
     * @param id The ID of the title
     * @param title The title of the Title
     * @param price The price of the Title
     * @param notes Notes for the Title
     * @param flagged Whether the title is flagged as a new release
     * @param dateFlagged The date that this title was last flagged
     * @param issueFlagged The specific issue number that this title is flagged for
     */
    public Title(int id, String title, int price, String notes, boolean flagged, LocalDate dateFlagged, int issueFlagged) {
        this.id = id;
        this.title = title;
        this.price = price;
        this.notes = notes;
        this.flagged = new SimpleBooleanProperty(flagged);
        this.dateFlagged = dateFlagged;
        this.issueFlagged = issueFlagged;
    }

    /**
     * Gets the ID for this Title
     * @return The title's ID
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the title for this Title
     * @return The title's title
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the title for this title
     * @param title The new title for this Title
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Gets the price for this title
     * @return The price of this title
     */
    public int getPrice() {
        return price;
    }

    /**
     * Gets the price of this title in dollars and cents
     * @return A string representing this title in dollars and cents
     */
    public String getPriceDollars() {
        String total;
        int dollars = (price / 100);
        int cents = (price % 100);
        if ((cents / 10) == 0) {
            total = Integer.toString(dollars) + ".0" + Integer.toString(cents);
        }
        else {
            total = Integer.toString(dollars) + '.' + Integer.toString(cents);
        }
        return total;
    }

    /**
     * Sets the price of this title
     * @param price The price for this title as an integer
     */
    public void setPrice(int price) {
        this.price = price;
    }

    /**
     * Gets any notes for this title
     * @return The notes listed for this title
     */
    public String getNotes() {
        return notes;
    }

    /**
     * Sets any notes for this title
     * @param notes The notes for this title
     */
    public void setNotes(String notes) {
        this.notes = notes;
    }

    /**
     * Returns the title of this Title as a string
     * @return the title of this Title as a string
     */
    @Override
    public String toString() {
        return this.getTitle();
    }

    /**
     * returns the flagged property
     * @return The flagged property of this Title
     */
    public BooleanProperty flaggedProperty() {
        return flagged;
    }

    /**
     * Gets whether this title is flagged or not as a boolean
     * @return whether this title is flagged or not
     */
    public boolean isFlagged() {
        return this.flagged.get();
    }

    /**
     * Sets the flagged property of this title
     * @param flagged whether this title is to be flagged or not
     */
    public void setFlagged(boolean flagged) {
        this.flagged.set(flagged);
    }

    /**
     * Gets the date of the last time this title was flagged as a new release
     * as a LocalDate object
     * @return The date of the last this title was flagged
     */
    public LocalDate getDateFlagged() {
        return dateFlagged;
    }

    /**
     * Gets specific issue number that this title is flagged for
     * @return the title's flagged issue number
     */
    public int getIssueFlagged() { return issueFlagged; }

    /**
     * Sets the specific issue number that this title is flagged for
     * @param issueFlagged the issue to flag for this title
     */
    public void setIssueFlagged(int issueFlagged) { this.issueFlagged = issueFlagged; }

}
